---
name: 👷tests

on:  # yamllint disable-line rule:truthy
  push:  # publishes to TestPyPI pushes to the main branch
    branches-ignore:
    - dependabot/**
  pull_request:
  schedule:
  - cron: 1 0 * * *  # Run daily at 0:01 UTC
  workflow_dispatch:
    inputs:
      release-version:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-version
        description: >-
          Target PEP440-compliant version to release.
          Please, don't prepend `v`.
        type: string
        required: true
      release-commitish:
        # github.event_name == 'workflow_dispatch'
        # && github.event.inputs.release-commitish
        default: ''
        description: >-
          The commit to be released to PyPI and tagged
          in Git as `release-version`. Normally, you
          should keep this empty.
        type: string
        required: false
      YOLO:
        default: false
        description: >-
          Flag whether test results should block the
          release (true/false). Only use this under
          extraordinary circumstances to ignore the
          test failures and cut the release regardless.
        type: boolean
        required: false

concurrency:
  group: >-
    ${{
        github.workflow
    }}-${{
        github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1
  PY_COLORS: 1
  TOX_TESTENV_PASSENV: >-
    FORCE_COLOR
    MYPY_FORCE_COLOR
    NO_COLOR
    PY_COLORS
    PYTEST_THEME
    PYTEST_THEME_MODE
  TOX_PARALLEL_NO_SPINNER: 1

jobs:
  pre-setup:
    name: ⚙️ Pre-set global build settings
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: python
    outputs:
      release-requested: >-
        ${{
            steps.request-check.outputs.release-requested || false
        }}
    steps:
    - name: Mark the build as "release request"
      id: request-check
      if: github.event_name == 'workflow_dispatch'
      run: >-
        print('::set-output name=release-requested::true')

  tests:
    name: >-
      📝${{ matrix.towncrier-version }}
      /
      🐍${{ matrix.python-version }}
      /
      💻${{ matrix.os }}

    needs:
    - pre-setup

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        towncrier-version:
        - 22.8.0
        - 21.9.0rc1
        - 21.3.0
        - 19.9.0
        - 19.2.0
        python-version:
        - ~3.11.0-0
        - >-
          3.10
        - 3.9
        - 3.8
        - 3.7
        - 3.6
        os:
        - ubuntu-22.04
        - ubuntu-20.04
        - macos-12
        - macos-11
        - windows-latest
        exclude:
        - os: ubuntu-22.04
          python-version: 3.6  # EOL, only provided for older OSs
        - python-version: 3.6
          towncrier-version: 22.8.0  # Dropped support for Python 3.6

    continue-on-error: >-
      ${{
          (
            needs.pre-setup.outputs.release-requested == 'true' &&
            !github.event.inputs.YOLO
          ) && true || false
      }}

    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: python

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      id: python-install
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: >-
        Calculate Python interpreter version hash value
        for use in the cache key
      id: calc_cache_key_py
      run: |
        from hashlib import sha512
        from sys import version
        hash = sha512(version.encode()).hexdigest()
        print(f'::set-output name=py_hash_key::{hash}')
      shell: python
    - name: Set up pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: >-
          ${{ runner.os }}-pip-${{
          steps.calc_cache_key_py.outputs.py_hash_key }}-${{
          hashFiles('setup.cfg') }}-${{
          hashFiles('tox.ini') }}-${{
          hashFiles('pyproject.toml') }}-${{
          hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{
            steps.calc_cache_key_py.outputs.py_hash_key
          }}-
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install tox
      run: |
        python -m pip install --upgrade tox
    - name: Log installed dists
      run: |
        python -m pip freeze --all
    - name: Initialize tox envs
      run: >-
        python
        -m tox
        --parallel auto
        --parallel-live
        --force-dep 'towncrier ~= ${{ matrix.towncrier-version }}'
        --notest
    - name: Test with tox
      run: >-
        python
        -m tox
        --parallel auto
        --parallel-live
        --force-dep 'towncrier ~= ${{ matrix.towncrier-version }}'
    - name: Send coverage data to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: .test-results/pytest/cov.xml
        flags: >-
          CI-GHA,OS-${{
            runner.os
          }},VM-${{
            matrix.os
          }},Py-${{
            steps.python-install.outputs.python-version
          }},Towncrier-v${{
            matrix.towncrier-version
          }}

  check:  # This job does nothing and is only used for the branch protection
    if: always()

    needs:
    - tests

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  publish:
    needs:
    - check
    - pre-setup  # transitive, for accessing settings
    name: Build and publish Python 🐍 distributions 📦 to PyPI and TestPyPI
    runs-on: ubuntu-latest
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: build-dists
    steps:
    - name: Check out src from Git
      uses: actions/checkout@v2
      with:
        # Get shallow Git history (default) for tag creation events
        # but have a complete clone for any other workflows.
        # Both options fetch tags but since we're going to remove
        # one from HEAD in non-create-tag workflows, we need full
        # history for them.
        fetch-depth: >-
          ${{
            needs.pre-setup.outputs.release-requested == 'true'
            && 1 || 0
          }}
    - name: Drop Git tags from HEAD for non-release-requests
      if: >-
        needs.pre-setup.outputs.release-requested != 'true'
      run: >-
        git tag --points-at HEAD
        |
        xargs git tag --delete
    - name: Instruct setuptools-scm not to add a local version part
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      run: |
        echo 'local_scheme = "no-local-version"' >> pyproject.toml
        git update-index --assume-unchanged pyproject.toml
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install tox
      run: |
        python -m pip install --upgrade tox
    - name: Initialize tox envs
      run: |
        python -m tox --parallel auto --parallel-live --notest
    - name: Build dists with tox
      run: |
        python -m tox --parallel auto --parallel-live
    - name: Publish distribution 📦 to Test PyPI
      if: >-
        (
          github.event_name == 'push' &&
          github.ref == format(
            'refs/heads/{0}', github.event.repository.default_branch
          )
        ) ||
        needs.pre-setup.outputs.release-requested == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_PASSWORD }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish distribution 📦 to PyPI
      if: >-
        needs.pre-setup.outputs.release-requested == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_PASSWORD }}
...
